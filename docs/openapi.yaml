openapi: 3.1.0
info:
  description: "This is API overview"
  version: 0.1.0
  title: PyrHouse API
  contact:
    email: warrmag7@gmail.com
  license:
    name: MIT
    
security:
  - bearerAuth: [] # use the same name as above    
# tags:
#   - name: users
#     description: Operations about user
#     externalDocs:
#       description: Find out more about...
#       url: http://swagger.io
paths:
  /openapi.html:
    get:
      summary: Get docs
      responses:
        "200":
          description: Serves docs in html format
  /health:
    get:
      summary: Health
      description: Basic health endpoint
      responses:
        "200":
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: ok

          description: Serves docs in html format
  /auth:
    post:
      tags:
        - auth
      summary: Authorize & generate jwt
      description: ""
      operationId: auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
      responses:
        "201":
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /items:
    get:
      tags:
        - items
      description: Returns array of items both with serial and with quantity
      parameters:
        - in: query
          name: location_ids
          schema:
            type: array
            items:
              type: integer
          description: List of location IDs to filter items by
        - in: query
          name: category_id
          schema:
            type: integer
          description: Category ID to filter items by
        - in: query
          name: category_type
          schema:
            type: string
            enum: [asset, stock]
          description: Type of items to retrieve (asset or stock)
        - in: query
          name: category_label
          schema:
            type: string
          description: Category label to filter items by
      responses:
        "200":
          description: List of combined stock items and assets
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/Item"
                    - $ref: "#/components/schemas/StockItem"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          $ref: "#/components/responses/DefaultError"
            
  /assets:
    post:
      tags:
        - asset
      summary: Add a new asset
      description: ""
      operationId: addItem
      requestBody:
        $ref: "#/components/requestBodies/ItemRequest"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          description: created

  /assets/pyrcode/{pyrcode}:
    get:
      tags: 
        - asset
      deprecated: false
      parameters:
        - in: path
          name: pyrcode
          schema:
            type: string
          required: true
          description: Barcode value of item
      responses:
        "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Item"
        "404":
            description: not found

  /assets/bulk:
    post:
      tags:
        - asset
      summary: Add multiple assets in bulk
      description: Creates multiple assets with the same category, location and status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                serials:
                  type: array
                  items:
                    type: string
                  description: List of serial numbers for assets to create
                location_id:
                  type: integer
                  description: Location ID where assets will be stored (defaults to 1 if not specified)
                status:
                  type: string
                  description: Status of the assets (defaults to "available" if not specified)
                category_id:
                  type: integer
                  required: true
                  description: Category ID for the assets
                origin:
                  type: string
                  required: true
                  description: Origin of the assets (e.g. "purchase")
      responses:
        "201":
          description: Assets created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
                  errors:
                    type: array
                    items:
                      type: string
                    description: List of errors that occurred during creation of specific assets
        "400":
          description: Invalid request payload or category type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  details:
                    type: string

  /assets/{assetID}:
    delete:
      tags: 
        - asset
      deprecated: false
      parameters:
        - in: path
          name: assetID
          schema:
            type: integer
          required: true
          description: Numeric ID of the asset
      responses:
        "200":
            description: successful operation
            content:
              application/json:
                schema:
                  properties:
                    message:
                      type: string
        "409":
            description: unable to delete asset, asset already moved or unavailable 
            content:
              application/json:
                schema:
                  properties:
                    message:
                      type: string
  /stocks:
    post:
      tags:
        - stock
      summary: Register stock item
      description: Create stock item
      requestBody:
        content:
          application/json:
            schema:
              properties:
                category_id:
                  type: integer
                  example: 4
                  required: true
                  description: category of stock
                quantity:
                  type: integer
                  example: 99
                  required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockItem"
        "500":
          $ref: "#/components/responses/DefaultError"
  
  /locations:
    post:
      tags:
        - location
      summary: Create new location (Czteropak)
      description: ""
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  name:
                    type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          description: Invalid payload
        "409":
          description: Name already taken
  /locations/{locationID}/assets: 
    get:
      tags:
        - location
      summary: Get list of assets and stock items in given location to-refactor path
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
                  stock_items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stock"
        "500":
          description: todo error handling
          $ref: "#/components/responses/DefaultError"
  /locations/{locationID}:
    delete:
      tags:
        - location
      summary: Remove location by ID
      parameters:
        - in: path
          name: locationID
          schema:
            type: integer
          required: true
          description: Numeric ID of the location
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Location deleted successfully"
        "409":
          description: Conflict - Cannot delete location with existing items
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: "Could not delete location"
                  details:
                    type: string
        "500":
          $ref: "#/components/responses/DefaultError"

  /locations/{locationID}/search:
    get:
      tags:
        - location
      summary: Search items in location
      description: Search for items in a specific location by serial number, category name, or category label
      parameters:
        - in: path
          name: locationID
          schema:
            type: integer
          required: true
          description: Numeric ID of the location
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: Search query (minimum 1 character)
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Invalid search query
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: "Search query must be at least 1 character long"
        "500":
          $ref: "#/components/responses/DefaultError"

  /transfers:
    get:
      tags:
        - transfer
      summary: Pobierz listę wszystkich transferów
      description: Zwraca listę wszystkich transferów w systemie
      responses:
        "200":
          description: Lista wszystkich transferów
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transfer"
        "500":
          $ref: "#/components/responses/DefaultError"
    post:
      tags:
        - transfer
      summary: Utwórz nowy transfer
      description: Tworzy nowy transfer zasobów i pozycji magazynowych między lokalizacjami
      requestBody:
        $ref: "#/components/requestBodies/TransferRequest"
        required: true
      responses:
        "201":
          description: Transfer utworzony pomyślnie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"
        "400":
          description: Nieprawidłowe żądanie
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid request payload
        "409":
          description: Błąd walidacji magazynu
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Warehouse equipment validation failed
                  reasons:
                    type: array
                    items:
                      $ref: "#/components/schemas/ValidationError"
        "500":
          $ref: "#/components/responses/DefaultError"
  
  /transfers/{transferID}:
    get:
      tags:
        - transfer
      summary: Pobierz szczegóły transferu
      description: Zwraca szczegółowe informacje o transferze na podstawie jego ID
      parameters:
        - in: path
          name: transferID
          schema:
            type: integer
          required: true
          description: Identyfikator transferu
      responses:
        "200":
          description: Szczegóły transferu
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"
        "400":
          description: Nieprawidłowy identyfikator transferu
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transfer ID is required
        "500":
          $ref: "#/components/responses/DefaultError"

  /transfers/{transferID}/confirm:
    patch:
      tags:
        - transfer
      summary: Potwierdź transfer
      description: Aktualizuje status transferu
      parameters:
        - in: path
          name: transferID
          schema:
            type: integer
          required: true
          description: Identyfikator transferu
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - completed
                required:
                  - status
      responses:
        "200":
          description: Transfer potwierdzony pomyślnie
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfer_id:
                    type: integer
                    example: 3
                  status:
                    type: string
                    example: completed
                  message:
                    type: string
                    example: Transfer confirmed successfully
        "400":
          description: Nieprawidłowy status transferu
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unsupported transfer status method
        "500":
          description: Nie można zaktualizować statusu transferu
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unable to update transfer status
                  details:
                    type: string

  /transfers/{transferID}/assets/{itemID}/restore-to-location:
    patch:
      tags:
        - transfer
      summary: Usuń zasób z transferu
      description: Usuwa zasób z transferu i przywraca go do wskazanej lokalizacji
      parameters:
        - in: path
          name: transferID
          schema:
            type: integer
          required: true
          description: Identyfikator transferu
        - in: path
          name: itemID
          schema:
            type: integer
          required: true
          description: Identyfikator zasobu
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  location_id:
                    type: integer
                    example: 1
                    description: Identyfikator lokalizacji, do której należy przywrócić zasób
                required:
                  - location_id
      responses:
        "200":
          description: Zasób usunięty z transferu pomyślnie
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfer_id:
                    type: integer
                    example: 3
        "400":
          description: Nieprawidłowe żądanie
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required json location_id
        "500":
          $ref: "#/components/responses/DefaultError"
  /transfers/{transferID}/categories/{categoryID}/restore-to-location:
    patch:
      tags:
        - transfer
      summary: Usuń pozycję magazynową z transferu
      description: Usuwa pozycję magazynową z transferu i przywraca ją do wskazanej lokalizacji
      parameters:
        - in: path
          name: transferID
          schema:
            type: integer
          required: true
          description: Identyfikator transferu
        - in: path
          name: categoryID
          schema:
            type: integer
          required: true
          description: Identyfikator kategorii pozycji magazynowej
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  location_id:
                    type: integer
                    example: 1
                    description: Identyfikator lokalizacji, do której należy przywrócić pozycję magazynową
                  quantity:
                    type: integer
                    example: 32
                    description: Ilość, która powinna zostać przywrócona
                required:
                  - location_id
                  - quantity
      responses:
        "200":
          description: Pozycja magazynowa usunięta z transferu pomyślnie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stock item removed from transfer successfully      
        "400":
          description: Nieprawidłowe żądanie
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Błąd podczas usuwania pozycji magazynowej z transferu
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to remove stock item from transfer
                  details:
                    type: string
  /items/categories:
    post:
      tags:
        - item category
      summary: Register user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: laptop       
                label:
                  type: string
                  example: Laptop
      responses:
        "201":
          description: Category created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCategory"
        "400":
          $ref: "#/components/responses/DefaultError"        
    get:
      tags:
        - item category
      summary: Returns collection of users
      description: ...
      responses:
        "200":
          description: List all users
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: "#/components/schemas/ItemCategory"
  /items/categories/{categoryID}:
    delete:
      tags: 
        - item category
      deprecated: false
      parameters:
        - in: path
          name: categoryID
          schema:
            type: integer
          required: true
          description: Numeric ID of the item category
      responses:
        "200":
            description: successful operation
            content:
              application/json:
                schema:
                  properties:
                    message:
                      type: string
        "409":
            description: unable to delete asset, asset already moved or unavailable 
            content:
              application/json:
                schema:
                  properties:
                    message:
                      type: string
  /users:
    post:
      tags:
        - users
      summary: Register user
      description: This can only be done by the logged in user with admin role.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UserCreateRequest"
        description: Created user object
        required: true
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - users
      summary: Returns collection of users
      description: Returns a list of all users. Requires moderator role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - users
      summary: Get user by ID
      description: Returns a single user. Requires user role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - users
      summary: Update user
      description: Updates an existing user. Requires admin role.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        description: Updated user object
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request payload or user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
servers:
  - url: pyrhouse-backend-f26ml.ondigitalocean.app/api
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for 
  responses:
    DefaultError:
      description: Operation failed location has stock/assets already
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  requestBodies:
    ItemRequest:
      content:
        application/json:
          schema:
            properties:
              serial:
                required: true
                type: string
              category_id:
                required: true
                type: string
              origin:
                required: true
                type: string
                description: Where is it from, default types are enum, but it allows to pass also personal & other, it just need to contain "keyword" to pass like druga-era-external
                enum:
                  - druga-era
                  - probis
                  - targowe
                  - personal-{}
                  - other-{}

    TransferRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              from_location_id:
                type: integer
                example: 1
                description: Identyfikator lokalizacji źródłowej
              location_id:
                type: integer
                example: 2
                description: Identyfikator lokalizacji docelowej
              asset_item_collection:
                type: array
                description: Kolekcja zasobów serializowanych do transferu
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Identyfikator zasobu
              stock_item_collection:
                type: array
                description: Kolekcja pozycji magazynowych do transferu
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Identyfikator pozycji magazynowej
                    quantity:
                      type: integer
                      format: int32
                      description: Ilość do transferu
            required:
              - from_location_id
              - location_id

    UserCreateRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - role
            properties:
              username:
                type: string
                example: johndoe
              password:
                type: string
                example: password123
              fullname:
                type: string
                example: John Doe
              role:
                type: string
                enum: [user, moderator, admin]
                example: user
    UserUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              fullname:
                type: string
                example: John Doe Updated
              password:
                type: string
                example: newpassword123
              role:
                type: string
                enum: [user, moderator, admin]
                example: moderator
    UserArray:
      content:
        application/json:
          schema:
            type: array
            assets:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Item:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Item"
    ItemCategory:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ItemCategory"
  schemas:
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: Serialized assets are not present in location
        property:
          type: string
          example: assets
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Error:
      type: object
      properties:
        error:
          type: string
          example: Could not delete location
        details:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 321
        serial:
          type: string
          example: XYZ321
        pyrcode:
          type: string
          example: PYR0L100
        location:
          $ref: "#/components/schemas/Location"
        category:
          $ref: "#/components/schemas/ItemCategory"

    Stock:
      type: object
      properties:
        id:
          type: integer
        category:
          $ref: "#/components/schemas/ItemCategory"
        quantity:
          type: integer
    ItemCategory:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          example: asset 
        name:
          type: string
          example: laptop       
        label:
          type: string
          example: Laptop
    Location:
      type: object
      properties:
        id: 
          type: integer
          example: 3
        name:
          type: string
          example: "Gzdaczroom"
    Transfer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identyfikator transferu
        from_location:
          $ref: "#/components/schemas/Location"
          description: Lokalizacja źródłowa
        to_location:
          $ref: "#/components/schemas/Location"
          description: Lokalizacja docelowa
        assets_collection:
          type: array
          description: Kolekcja zasobów w transferze
          items:
            $ref: "#/components/schemas/Item"
        stock_items_collection:
          type: array
          description: Kolekcja pozycji magazynowych w transferze
          items:
            $ref: "#/components/schemas/Stock"
        transfer_date:
          type: string
          format: date-time
          description: Data transferu
        status:
          type: string
          description: Status transferu
          enum:
            - in_transit
            - completed
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        fullname:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, moderator, admin]
          example: user
    StockItem:
      type: object
      properties:
        id:
          type: integer
        category_id:
          type: integer
          example: 4
        quantity:
          type: integer
          example: 99
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        fullname:
          type: string
        role:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
