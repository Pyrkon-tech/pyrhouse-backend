openapi: 3.1.0
info:
  description: "This is API overview"
  version: 0.1.0
  title: PyrHouse API
  contact:
    email: warrmag7@gmail.com
  license:
    name: MIT
    
security:
  - bearerAuth: [] # use the same name as above    
# tags:
#   - name: users
#     description: Operations about user
#     externalDocs:
#       description: Find out more about...
#       url: http://swagger.io
paths:
  /openapi.html:
    get:
      summary: Get docs
      responses:
        "200":
          description: Serves docs in html format
  /health:
    get:
      summary: basic ping endpoint
      responses:
        "200":
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: ok

          description: Serves docs in html format
  /auth:
    post:
      tags:
        - auth
      summary: Authorize & generate jwt
      description: ""
      operationId: auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
      responses:
        "201":
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /assets:
    post:
      tags:
        - asset
      summary: Add a new asset
      description: ""
      operationId: addItem
      requestBody:
        $ref: "#/components/requestBodies/ItemRequest"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          description: created
    get:
      tags:
        - asset
      summary: NOT IMPLEMENTED YET
      description: ...
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            assets:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Invalid status value 
  /locations:
    post:
      tags:
        - location
      summary: Create new location (Czteropak)
      description: ""
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  name:
                    type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          description: Invalid payload
        "409":
          description: Name already taken
  /locations/{locationID}/assets: 
    get:
      tags:
        - location
      summary: Get list of assets and stock items in given location to-refactor path
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
                  stock_items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stock"
        "500":
          description: todo error handling
          $ref: "#/components/responses/DefaultError"
  /locations/{locationID}:
    delete:
      tags:
        - location
      summary: Remove location by ID
      parameters:
        - in: path
          name: locationID
          schema:
            type: integer
          required: true
          description: Numeric ID of the location
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Location deleted successfully
        "409":
          $ref: "#/components/responses/DefaultError"
        "500":
          $ref: "#/components/responses/DefaultError"

  /transfers:
    post:
      tags:
        - transfer
      summary: Register transfer
      description: Create transfer of items
      requestBody:
        $ref: "#/components/requestBodies/TransferRequest"
        required: true
  /transfers/{transferId}/confirm:
    patch:
      tags:
        - transfer
      description: Update transfer status
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - completed
                      - confirmed
                      - in_transit
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                # TODO unify with STOCKs
                  transfer_id:
                    type: integer
                    example: 3
                  status:
                    type: string
                    example: completed
                  message:
                    type: string
                    example: happy message
  /transfers/{transferId}/assets/{itemId}/restore-to-location:
    patch:
      tags:
        - transfer
      description: Update transfer status
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  location_id:
                    type: integer
                    example: 1
                    description: id of location where to restore item
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                # TODO unify with STOCKs
                  transfer_id:
                    type: integer
                    example: 3
                    description: Location deleted successfully      
        "400":
          $ref: "#/components/responses/DefaultError"
        "500":
          $ref: "#/components/responses/DefaultError"
  /transfers/{transferId}/categories/{categoryId}/restore-to-location:
    patch:
      tags:
        - transfer
      description: Update transfer status
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  location_id:
                    type: integer
                    example: 1
                    description: id of location where to restore item
                  quantity:
                    type: integer
                    example: 32
                    description: what amount should be moved from current location
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stock item removed from transfer successfully      
        "400":
          $ref: "#/components/responses/DefaultError"
        "500":
          $ref: "#/components/responses/DefaultError"
  /items/categories:
    post:
      tags:
        - item category
      summary: Register user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: laptop       
                label:
                  type: string
                  example: Laptop
      responses:
        "201":
          description: Category created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCategory"
        "400":
          $ref: "#/components/responses/DefaultError"        
    get:
      tags:
        - item category
      summary: Returns collection of users
      description: ...
      responses:
        "200":
          description: List all users
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: "#/components/schemas/ItemCategory"
  /users:
    post:
      tags:
        - users
      summary: Register user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/UserCreateRequest"
        description: Created user object
        required: true
      responses:
        "201":
          description: PROPER RESPONSE NOT IMPLEMENTED YET
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      tags:
        - users
      summary: Returns collection of users
      description: ...
      responses:
        "200":
          description: List all users
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
servers:
  - url: pyrhouse-backend-f26ml.ondigitalocean.app
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for 
  responses:
    DefaultError:
      description: Operation failed location has stock/assets already
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  requestBodies:
    ItemRequest:
      content:
        application/json:
          schema:
            properties:
              serial:
                type: string
              category_id:
                type: string
    TransferRequest:
      content:
        application/json:
          schema:
            properties:
              from_location_id:
                type: string
                example: 1
                required: true
                description: origin location
              location_id:
                type: string
                example: 1
                required: true
                description: desired location, invalid name-to fix
              serialized_item_collection:
                type: array
                items:
                  type: integer
                  format: int64
                  example: [1, 2, 3]
              unserialized_item_collection:
                type: array
                items:
                  $ref: "#/components/schemas/UnserializedItem"

    UserCreateRequest:
      content:
        application/json:
          schema:
            type: array
            assets:
              $ref: "#/components/schemas/UserRequest"
    UserArray:
      content:
        application/json:
          schema:
            type: array
            assets:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Item:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Item"
    ItemCategory:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ItemCategory"
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Error:
      type: object
      properties:
        error:
          type: string
          example: Could not delete location
        details:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 321
        serial:
          type: string
          example: XYZ321
        category:
          $ref: "#/components/schemas/ItemCategory"
    Stock:
      type: object
      properties:
        id:
          type: integer
        category:
          $ref: "#/components/schemas/ItemCategory"
        quantity:
          type: integer
    ItemCategory:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          example: laptop       
        label:
          type: string
          example: Laptop
    Location:
      type: object
      properties:
        id: 
          type: integer
          example: 3
        name:
          type: string
          example: "Gzdaczroom"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        fullname:
          type: string
#         password:
#           type: string
        role:
          type: string
    UnserializedItem:
      type: object
      properties:
        category_id:
          type: integer
          example: 4
        quantity:
          type: integer
          example: 99
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        fullname:
          type: string
        role:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
