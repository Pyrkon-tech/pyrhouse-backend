openapi: 3.0.0
info:
  description: "This is API overview"
  version: 0.1.0
  title: PyrHouse API
  contact:
    email: warrmag7@gmail.com
  license:
    name: MIT
    
security:
  - bearerAuth: [] # use the same name as above    
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /auth:
      post:
        tags:
          - auth
        summary: Authorize & generate jwt
        description: ""
        operationId: auth
        requestBody:
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
        responses:
          "201":
            description: created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
  /items:
    post:
      tags:
        - item
      summary: Add a new item
      description: ""
      operationId: addItem
      requestBody:
        $ref: "#/components/requestBodies/Item"
      responses:
        "201":
          description: created
    get:
      tags:
        - item
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Invalid status value
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Register user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
        description: Created user object
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
servers:
  - url: pyrhouse-backend-f26ml.ondigitalocean.app
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for 
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Item:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Item"
        application/xml:
          schema:
            $ref: "#/components/schemas/Item"
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Item:
      type: object
      properties:
        id:
          type: integer
        serial:
          type: string
        type:
          type: string
        
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        fullname:
          type: string
#         password:
#           type: string
        role:
          type: string
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        fullname:
          type: string
        role:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
